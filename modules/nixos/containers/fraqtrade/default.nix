# Auto-generated using compose2nix v0.3.2-pre.
{ pkgs, lib, ... }:

{
  # Runtime
  # virtualisation.podman = {
  #   enable = true;
  #   autoPrune.enable = true;
  #   dockerCompat = true;
  #   defaultNetwork.settings = {
  #     # Required for container networking to be able to use names.
  #     dns_enabled = true;
  #   };
  # };
  #
  # # Enable container name DNS for non-default Podman networks.
  # # https://github.com/NixOS/nixpkgs/issues/226365
  # networking.firewall.interfaces."podman+".allowedUDPPorts = [ 53 ];
  #
  # virtualisation.oci-containers.backend = "podman";
  #
  # # Containers
  # virtualisation.oci-containers.containers."freqtrade" = {
  #   image = "freqtradeorg/freqtrade:stable";
  #   volumes = [
  #     "/home/charles/dev/code/nix/snowdev/user_data:/freqtrade/user_data:rw"
  #   ];
  #   ports = [
  #     "127.0.0.1:8080:8080/tcp"
  #   ];
  #   cmd = [
  #     "trade"
  #     "--logfile"
  #     "/freqtrade/user_data/logs/freqtrade.log"
  #     "--db-url"
  #     "sqlite:////freqtrade/user_data/tradesv3.sqlite"
  #     "--config"
  #     "/freqtrade/user_data/config.json"
  #     "--strategy"
  #     "SampleStrategy"
  #   ];
  #   log-driver = "journald";
  #   extraOptions = [
  #     "--network-alias=freqtrade"
  #     "--network=fraqtrade_default"
  #   ];
  # };
  # systemd.services."podman-freqtrade" = {
  #   serviceConfig = {
  #     Restart = lib.mkOverride 90 "always";
  #   };
  #   after = [
  #     "podman-network-fraqtrade_default.service"
  #   ];
  #   requires = [
  #     "podman-network-fraqtrade_default.service"
  #   ];
  #   partOf = [
  #     "podman-compose-fraqtrade-root.target"
  #   ];
  #   wantedBy = [
  #     "podman-compose-fraqtrade-root.target"
  #   ];
  # };
  #
  # # Networks
  # systemd.services."podman-network-fraqtrade_default" = {
  #   path = [ pkgs.podman ];
  #   serviceConfig = {
  #     Type = "oneshot";
  #     RemainAfterExit = true;
  #     ExecStop = "podman network rm -f fraqtrade_default";
  #   };
  #   script = ''
  #     podman network inspect fraqtrade_default || podman network create fraqtrade_default
  #   '';
  #   partOf = [ "podman-compose-fraqtrade-root.target" ];
  #   wantedBy = [ "podman-compose-fraqtrade-root.target" ];
  # };
  #
  # # Root service
  # # When started, this will automatically create all resources and start
  # # the containers. When stopped, this will teardown all resources.
  # systemd.targets."podman-compose-fraqtrade-root" = {
  #   unitConfig = {
  #     Description = "Root target generated by compose2nix.";
  #   };
  #   wantedBy = [ "multi-user.target" ];
  # };
}
